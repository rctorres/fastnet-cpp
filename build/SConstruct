#This is a scons MakeFile.
#Compiles and installs the FastNet package.

#Author: Rodrigo Coura Torres (Rodrigo.Torres@cern.ch)

from __future__ import print_function
from __future__ import unicode_literals
from __future__ import division
from __future__ import absolute_import

import os
import platform
import re
import fnmatch
import json

import sc_libs
import sc_matlab


#The matlab builder (calling mex)
def matlabBuild(target, source, env, for_signature):
	incPaths = ' '.join(['-I%s' % i for i in env['CPPPATH']])
	libPaths = ' '.join(['-L%s' % i for i in env['LIBPATH']])
	libList = ' '.join(['-l%s' % i for i in env['LIBS']])
	compFlags = ' '.join(env['CCFLAGS'])
	return '%s -cxx %s %s %s %s -o %s %s' % (env['MEX'], compFlags, incPaths, libPaths, libList, target[0], source[0]);


#loading the configuration file produced after calling "configure" script
config = None
try:
  with open('config_values.json', 'r') as f:
    config = json.loads(f.read())
except BaseException as e:
  print ('Error loading configuration file. Did you run "configure" script first?')
  sys.exit(1)


#Compiling flags.
globalCPPFlags = ['-DNO_OMP']
libCPPFlags = []
mexCPPFlags = []

#Getting whether to compile in debug mode.
debug = int(ARGUMENTS.get('debug', 0))
if debug > 0: globalCPPFlags += ['-DDEBUG=%d' % debug, '-g']

#Am I using a MAC computer? Then I apply some optimizations for it
if platform.system() == 'Darwin':
  libCPPFlags += ['-std=c++11']
elif platform.system() == 'Linux':
  if debug == 0:
    libCPPFlags += ['-O3', '-m64']
    dist, version, branch = platform.dist()
    if (dist == 'debian'): libCPPFlags += ['-fopenmp']

incPath = ['../', config['matlab']['incDir']]
libPath = ['./', config['matlab']['libDir']]

#Creating the Matlab custom made builder.
matBuilder = Builder(generator = matlabBuild, suffix = config['matlab']['arch'])

#Creating our building environment.
env = Environment(CXX = 'g++', CPPPATH = incPath, ENV = os.environ)
env.Append(BUILDERS = {'Matlab' : matBuilder})
env.Append(MEX = config['matlab']['mex']) #Passing the path to the mex compiler.

### Creating the dynamic libraries.
libInstList = [];
for lib, opt in sc_libs.libs.iteritems():
  libName = env.SharedLibrary(target = lib,
                              source = Glob('../src/%s/*.c*' % lib),
                              CCFLAGS = globalCPPFlags + libCPPFlags,
                              LIBS = opt['LIBS'] + ['mx', 'mex', 'mat', 'm'],
                              LIBPATH = libPath)
  libInstList.append(libName)


### Creating Matlab bindings
matBinList = []
for mat, opt in sc_matlab.matlab.iteritems():
  matBinding = env.Matlab(target = mat,
                          source = '../src/matlab/%s.cxx' % mat, 
                          CCFLAGS = globalCPPFlags + mexCPPFlags, 
                          LIBS = opt['LIBS'], 
                          LIBPATH = libPath)
  matBinList.append(matBinding);

### Getting the matlab scripts (the ones not needing compilation).
matScriptList = Glob('../script/matlab/*.m')

###Specifying the installations directories.
libInstDir = config['installation']['libDir']
matInstDir = config['installation']['matDir']

#Associating the files list to their installation directories.
env.Install(libInstDir, libInstList)
env.Install(matInstDir, matBinList + matScriptList)

#Creating the installation aliases.
instMat = env.Alias('install-matlab', [libInstDir, matInstDir])
env.Alias('install', [instMat])
