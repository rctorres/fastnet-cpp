#This is a scons MakeFile.
#Compiles and installs the FastNet package.

#Author: Rodrigo Coura Torres (Rodrigo.Torres@cern.ch)

import os
import platform
import re
import fnmatch

import sc_libs
import sc_matlab

#Supported otptions are 'icpc' or 'g++';
COMPILER = os.environ.get('FASTNET_COMPILER', 'g++');
MATLAB_RELEASE = os.environ.get('MATLAB_RELEASE')

LINUX_OPT_FLAGS = ['-O3', '-m64'];
OPENMP_FLAG = ['-fopenmp']
if COMPILER == 'icpc':
  LINUX_OPT_FLAGS = ['-m64', '-ipo', '-O3', '-static', '-xHost'];
  OPENMP_FLAG = ['-openmp']


#To retrieve all source code files.
def getSourceFiles(sourcesDir):
	srcFilter = re.compile('\.cxx\Z|\.cpp\Z|\.c\Z')
	return ['%s%s%s' % (sourcesDir, os.path.sep, f) for f in os.listdir(sourcesDir) if srcFilter.search(f) is not None]

#Compiling flags.
globalCPPFlags = []
libCPPFlags = []
mexCPPFlags = []

#Getting whether to compile in debug mode.
debug = int(ARGUMENTS.get('debug', 0))
if debug > 0: 
  globalCPPFlags += ['-DDEBUG=%d' % debug, '-g']

#Am I using a MAC computer? Then I apply some optimizations for it
if platform.system() == 'Darwin':
  matlabPath = '/Applications/%s' % MATLAB_RELEASE
  matlabArch = 'maci64'
  globalCPPFlags += ['-DNO_OMP']
  libCPPFlags += ['-std=c++11']
elif platform.system() == 'Linux':
  if debug == 0: libCPPFlags += LINUX_OPT_FLAGS
  matlabPath = '/usr/local/MATLAB/%s' % MATLAB_RELEASE
  matlabArch = 'glnxa64'
  dist, version, branch = platform.dist()
  if (debug == 0) and ((dist == 'debian') or (COMPILER == 'icpc') ): libCPPFlags += OPENMP_FLAG
  globalCPPFlags += ['-DNO_OMP']

incPath = ['../', '%s/extern/include' % matlabPath]
libPath = ['./', '%s/bin/%s' % (matlabPath, matlabArch)]

#Setting the list of directories where to look for header files.
env = Environment(CXX = COMPILER, CPPPATH = incPath, ENV = os.environ)

#The installation dir is defined in the following environment variable. Otherwise, it will
#be installed in fastnel/install.
install_dir = os.environ.get('FASTNET_INST_DIR', os.path.abspath('../install'));

#Creating the Matlab environment builder.
matBuilder = Builder(generator = sc_matlab.matlabBuild, suffix = sc_matlab.getMatlabSuffix())
env.Append(BUILDERS = {'Matlab' : matBuilder})

### Creating the dynamic libraries.
libInstList = [];
libMap = {}
for lib, opt in sc_libs.libs.iteritems():
  libName = env.SharedLibrary(target = lib, source = getSourceFiles('../src/%s' % lib),
                              CCFLAGS = globalCPPFlags + libCPPFlags,
                              LIBS = opt['LIBS'] + ['mx', 'mex', 'mat', 'm'],
                              LIBPATH = libPath)
  libInstList.append(libName)
  libMap[lib] = libName


### Creating Matlab bindings
matBinList = []
for mat, opt in sc_matlab.matlab.iteritems():
  matBinding = env.Matlab(target = mat, source = '../src/matlab/%s.cxx' % mat, 
                          CCFLAGS = globalCPPFlags + mexCPPFlags, 
                          LIBS = opt['LIBS'], 
                          LIBPATH = libPath)
  matBinList.append(matBinding);

### Getting the matlab scripts.
matScriptDir = '../script/matlab';
matScriptList = ['%s/%s' % (matScriptDir, f) for f in fnmatch.filter(os.listdir(matScriptDir), '*.m')]

###Specifying the installations directories.
libInstDir = install_dir + '/lib'
matInstDir = install_dir + '/script'

#Associating the files list to their installation directories.
env.Install(libInstDir, libInstList)
env.Install(matInstDir, matBinList + matScriptList)

#Creating the installation aliases.
instMat = env.Alias('install-matlab', [libInstDir, matInstDir])
env.Alias('install', [instMat])
