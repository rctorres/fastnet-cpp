#This is a scons MakeFile.
#Compiles and installs the FastNet package.

#Author: Rodrigo Coura Torres (Rodrigo.Torres@cern.ch)

from __future__ import print_function
from __future__ import unicode_literals
from __future__ import division
from __future__ import absolute_import

import os
import platform
import re
import fnmatch
import json
import stat
import sys
import subprocess

import sc_libs


def cythonBuild(target, source, env, for_signature):
  setup = """
from distutils.core import setup
from Cython.Build import cythonize
from distutils.extension import Extension

setup(ext_modules = cythonize(Extension("fastnet",
           ["../cython/fastnet.pyx"],                 # our Cython source
           language="c++",             # generate C++ code
           extra_compile_args=['-std=c++11', '-mmacosx-version-min= 10.9'],
           extra_link_args=['-std=c++11', '-mmacosx-version-min= 10.9'],
           library_dirs=["/Users/rtorres/Tools/lib/fastnet/lib"],
           include_dirs=["../fastnet"],
           libraries=["neuralnet", "training"])
      ))
"""
  setupFileName = 'cython_setup.py'
  with open(setupFileName, 'w') as f: f.write(setup)
  return 'source activate telarix; python {} build_ext --inplace; source activate legacy'.format(setupFileName)


#loading the configuration file produced after calling "configure" script
config = None
try:
  with open('config_values.json', 'r') as f:
    config = json.loads(f.read())
except BaseException as e:
  print ('Error loading configuration file. Did you run "configure" script first?')
  sys.exit(1)


#Compiling flags.
globalCPPFlags = ['-DNO_OMP', '-DBOOST_ALL_DYN_LINK', '-std=c++11', '-stdlib=libc++']
libCPPFlags = []
mexCPPFlags = []

#Getting whether to compile in debug mode.
debug = int(ARGUMENTS.get('debug', 0))
if debug > 0: globalCPPFlags += ['-DDEBUG=%d' % debug, '-g']

######## SHPULD BOOST REFERENCES GO TO CONFIGURE???? ############
incPath = ['../', os.path.join(os.environ['BOOST_HOME'], 'include')]
libPath = ['./', os.path.join(os.environ['BOOST_HOME'], 'lib')]

#Am I using a MAC computer? Then I apply some optimizations for it
if platform.system() == 'Darwin':
  libCPPFlags += []
elif platform.system() == 'Linux':
  incPath.append('/usr/include')
  libPath.append('/usr/lib')
  if debug == 0:
    libCPPFlags += ['-O3', '-m64']
    dist, version, branch = platform.dist()
    if (dist == 'debian'): libCPPFlags += ['-fopenmp']

#Creating our building environment.
env = Environment(CXX = 'g++', CPPPATH = incPath, ENV = os.environ) #This is for default C++ code

#env.Append(BUILDERS = {'Cython' : Builder(generator = cythonBuild)}) #This is for dealing with cython compilations

######IF I NEED TO PASS ANY SPECIFIC VALUE TO THE CYTHON COMPILER, I CAN APPEND THESE VARIABLES TO THE ENVIRONMENT LIKE I'M DOING IN THE COMMAND BELLOW#####
#env.Append(MEX = config['matlab']['mex']) #Passing the path to the mex compiler.


### Creating the fastnet dynamic libraries.
libInstList = [];
for lib, opt in sc_libs.libs.iteritems():
  libName = env.SharedLibrary(target = lib,
                              source = Glob('../src/%s/*.c*' % lib),
                              CCFLAGS = globalCPPFlags + libCPPFlags,
                              LIBS = opt['LIBS'],
                              LIBPATH = libPath)
  libInstList.append(libName)


### Creating Python bindings. Starting it with the scripts which do not need compilation
scriptInstList = Glob('../script/python/*.py')

#Going over scripts bind to C++ code (using Cython for that)
#scriptInstList.append(env.Cython(target = 'fastnet', source = '../cython/fastnet.pyx'))

#Processing bin files. Any executable that beed to be installed should go in this list.
binInstList = []


###Specifying the installations directories.
libInstDir = config['installation']['libDir']
scriptInstDir = config['installation']['scriptDir']
binInstDir = config['installation']['binDir']

#Associating the files list to their installation directories.
env.Install(libInstDir, libInstList)
env.Install(scriptInstDir, scriptInstList)
env.Install(binInstDir, binInstList)

#Creating the installation aliases.
instAll = env.Alias('install-all', [libInstDir, scriptInstDir, binInstDir])
env.Alias('install', [instAll])


#Creating the cython compilation files.
setup = """
from distutils.core import setup
from Cython.Build import cythonize
from distutils.extension import Extension

setup(ext_modules = cythonize(Extension("fastnet",
           ["../cython/fastnet.pyx"],                 # our Cython source
           language="c++",             # generate C++ code
           extra_compile_args=['-std=c++11', '-mmacosx-version-min= 10.9'],
           extra_link_args=['-std=c++11', '-mmacosx-version-min= 10.9'],
           library_dirs=["{libInstDir}"],
           include_dirs=["../"],
           libraries=["neuralnet", "training"])
      ))
""".format(libInstDir = libInstDir)
setupFileName = 'cython_setup.py'
with open(setupFileName, 'w') as f: f.write(setup)

#creating cython bash installation file
bash = """
#! /bin/bash
source activate telarix
python {cythonFile} build_ext --inplace --verbose
if [ ! -d "{scriptDir}" ]; then
  mkdir -p {scriptDir}
fi
cp *.so {scriptDir}
source activate legacy
""".format(cythonFile = setupFileName, scriptDir = scriptInstDir)
bashFileName = 'cython-install.sh'
with open(bashFileName, 'w') as f: f.write(bash)
os.lchmod(bashFileName, stat.S_IRWXU)
#subprocess.call('./' + bashFileName, shell=True)

print ("Don't forget to run {} to compile and install cython extensions!".format(bashFileName))

